name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Lint
        run: pnpm run lint

      - name: Test
        run: pnpm test

      - name: List rules
        run: pnpm run list-rules

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          registry-url: "https://registry.npmjs.org"

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Publish to npm (if version changed)
        run: |
          # Get current package version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Package version: $CURRENT_VERSION"

          # Get published version (handle case where package doesn't exist)
          PUBLISHED_VERSION=$(npm view eslint-plugin-functype version 2>/dev/null || echo "0.0.0")
          echo "Published version: $PUBLISHED_VERSION"

          if [ "$PUBLISHED_VERSION" != "$CURRENT_VERSION" ]; then
            if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
              echo "Publishing version $CURRENT_VERSION to npm..."
              npm publish
            else
              echo "NPM_TOKEN not set, skipping publish (this is expected for forks/PRs)"
            fi
          else
            echo "Version unchanged, skipping publish"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
